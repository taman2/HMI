/*
* DS18B20.h
*
* Created: 9/22/2020 3:41:08 PM
* Author: HMI
*/


#ifndef DS18B20_H_
#define DS18B20_H_

#include "DS1820_PL_Confg.h"
#include "Data_Types.h"
#include "OneWire.h"

/************************MACROS**************************/

#define DS18B20_RESET_VALUE 0XF0U
#define DS18B20_SKIP_ROM_COMMAND 0XCCU
#define DS18B20_HIGH_VALUE 0XFFU
#define DS18B20_LOW_VALUE 0X00U
#define DS18B20_NOTHING 0X00U
#define DS18B20_WRITE_CONFIG_COMMAND 0X4EU
#define DS18B20_TEMP_CONVERT_COMMAND 0X44U
#define DS18B20_READ_SCRATCHPAD_COMMAND 0XBEU
#define DS18B20_GENERAL_STATE_RESET_THEN_TEMPRATURE_CONVERT 0u
#define DS18B20_RESET_STATE_TRANSFER_RESET_VALUE 1u
#define DS18B20_RESET_STATE_RECEIVE_RESET_VALUE 2u
#define DS18B20_GENERAL_STATE_CONFIGURE_RESOLUTION 3u
#define DS18B20_GENERAL_STATE_SKIP_ROM_THEN_TEMPRATURE_CONVERT 4u
#define DS18B20_GENERAL_STATE_TEMPRATURE_CONVERT 5u
#define DS18B20_GENERAL_STATE_RESET_THEN_READ_SCRATCHPAD 6u
#define DS18B20_GENERAL_STATE_SKIP_ROM_THEN_READ_SCRATCHPAD 7u
#define DS18B20_GENERAL_STATE_READ_SCRATCHPAD 8u
#define DS18B20_GENERAL_STATE_READ_TWO_BYTES_OF_TEMP 9u

#define DS18B20_FINISHED_FUNCTION_EXECUTION 10u
#define DS18B20_CONGFIGURE_RESOLUTION_SKIP_ROM_COMMNAD 11u
#define DS18B20_CONGFIGURE_RESOLUTION_WRITE_CONFIG_COMMAND 12u
#define DS18B20_CONGFIGURE_RESOLUTION_SEND_NOTHING 13u
#define DS18B20_CONGFIGURE_RESOLUTION_SEND_RESOLUTION 14u
#define DS18B20_SKIP_ROM_COMMAND_TRANSFER_SKIP_ROM 15u
#define DS18B20_SKIP_ROM_COMMAND_RECEIVE_SKIP_ROM 16u
#define DS18B20_WRITE_CONFIG_COMMAND_TRANSFER_WRITE_CONFIG 17u
#define DS18B20_WRITE_CONFIG_COMMAND_RECEIVE_WRITE_CONFIG 18u
#define DS18B20_SEND_NOTHHING_DOUBLE_TIMES_TRANSFER_NOTHING 19u
#define DS18B20_SEND_NOTHHING_DOUBLE_TIMES_RECEIVE_NOTHING 20u
#define DS18B20_SEND_RESOLUTION_CONFIGURATION_TRANSFER_RESOLUTION 21u
#define DS18B20_SEND_RESOLUTION_CONFIGURATION_RECEIVE_RESOLUTION 22u
#define DS18B20_TEMPRATURE_CONVERT_COMMAND_TRANSFER_TEMPRATURE_CONVERT 23u
#define DS18B20_TEMPRATURE_CONVERT_COMMAND_RECEIVE_TEMPRATURE_CONVERT 24u
#define DS18B20_READ_SCRATCHPAD_COMMAND_TRANSFER_READ_SCRATCHPAD_COMMAND 25u
#define DS18B20_READ_SCRATCHPAD_COMMAND_RECEIVE_READ_SCRATCHPAD_COMMAND 26u
#define DS18B20_READ_TWO_BYTES_OF_TEMPRATURE_TRANSFER 27u
#define DS18B20_READ_TWO_BYTES_OF_TEMPRATURE_RECEIVE 28u
#define DS18B20_DATA_RECIEVED_THROUGH_USART 29u
#define DS18B20_DATA_TRANSIMTED_THROUGH_USART 30u
#define DS18B20_DATA_NOT_RECIEVED_THROUGH_USART 31u
#define DS18B20_DATA_NOT_TRANSIMTED_THROUGH_USART 32u
#define DS18B20_START_CONVERSION 33u
#define DS18B20_DO_NOTHING 34u
#define DS18B20_END_COVERSION 35u
#define DS18B20_NODE_NOT_RESPONDING ONE_WIRE_NODE_NOT_RESPONDING
#define DS18B20_NODE_RESPONDED ONE_WIRE_NODE_RESPONDED
#define DS18B20_TIMER_0_OUTPUT_COMAPRE_REGISTER_EQUIVALENT_TO_HALF_MILI 255u


/**************Functions Prototype***********************/

#if DS18B20_EXECUTION_WAY==DS18B20_EXECUTED_BY_POLLING_DIO

void DS18B20_Init(void);
void DS18B20_Reset(uinteg8_t u8_DS18B20_Pin);
void DS18B20_Congfigure_Resolution(uinteg8_t u8_DS18B20_Pin,uinteg8_t u8_DS18B20_Resolution);
void DS18B20_Skip_Rom_Command(uinteg8_t u8_DS18B20_Pin);
void DS18B20_Temprature_Convert_Command(uinteg8_t u8_DS18B20_Pin);
void DS18B20_Read_Scratchpad_Command(uinteg8_t u8_DS18B20_Pin);
void DS18B20_Read_Two_Bytes_Of_Temprature(uinteg8_t u8_DS18B20_Pin,uinteg16_t*pu16_Temp_Value);
void DS18B20_Read_Temprature_Value_In_Float_Representation(uinteg8_t u8_DS18B20_Pin,volatile float64_t* pf32_DS18B20_Temp);

#elif DS18B20_EXECUTION_WAY==DS18B20_EXECUTED_BY_DIO_TIME_BASE

void DS18B20_Init(void);
void DS18B20_Reset(uinteg8_t u8_DS18B20_Pin);
void DS18B20_Congfigure_Resolution(uinteg8_t u8_DS18B20_Pin,uinteg8_t u8_DS18B20_Resolution);
void DS18B20_Skip_Rom_Command(uinteg8_t u8_DS18B20_Pin);
void DS18B20_Temprature_Convert_Command(uinteg8_t u8_DS18B20_Pin);
void DS18B20_Read_Scratchpad_Command(uinteg8_t u8_DS18B20_Pin);
void DS18B20_Read_Two_Bytes_Of_Temprature(uinteg8_t u8_DS18B20_Pin,uinteg16_t*pu16_Temp_Value);
void DS18B20_Read_Temprature_Value_In_Float_Representation(uinteg8_t u8_DS18B20_Pin,volatile float64_t* pf32_DS18B20_Temp);
#endif

#endif /* DS18B20_H_ */